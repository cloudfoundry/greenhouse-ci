# ~/workspace/greenhouse-private/dotfiles-scripts/fly-base-pipeline
groups:
- name: all
  jobs:
  - clean-up-pre-release-blobstore
  - build
  - create-aws
  - test-aws
  - wuts-aws
  - create-aws-china
  - test-aws-china
  - wuts-aws-china
  - create-aws-govcloud
  - test-aws-govcloud
  - wuts-aws-govcloud
  - create-azure
  - test-azure
  - wuts-azure
  - create-gcp
  - test-gcp
  - wuts-gcp
  - promote
  - promote-gcp
  - promote-aws
  - promote-vsphere
  - promote-azure
  - promote-stembuild
  - submit-azure-offer
  - publish-azure-offer
  - stembuild-windows
  - stembuild-linux
  - create-stembuild-linux-stemcell
  - test-stembuild-linux-stemcell
  - wuts-stembuild-linux-stemcell
  - create-stembuild-windows-stemcell
  - test-stembuild-windows-stemcell
  - wuts-stembuild-windows-stemcell
  - test-bosh-psmodules
  - test-stemcell-builder
  - github-release-stembuild
  - bump-minor
- name: aws
  jobs:
  - create-aws
  - test-aws
  - wuts-aws
- name: aws-china
  jobs:
  - create-aws-china
  - test-aws-china
  - wuts-aws-china
- name: aws-govcloud
  jobs:
  - create-aws-govcloud
  - test-aws-govcloud
  - wuts-aws-govcloud
- name: azure
  jobs:
  - create-azure
  - test-azure
  - wuts-azure
- name: gcp
  jobs:
  - create-gcp
  - test-gcp
  - wuts-gcp
- name: vsphere
  jobs:
  - stembuild-windows
  - stembuild-linux
  - create-stembuild-linux-stemcell
  - test-stembuild-linux-stemcell
  - wuts-stembuild-linux-stemcell
  - create-stembuild-windows-stemcell
  - test-stembuild-windows-stemcell
  - wuts-stembuild-windows-stemcell
- name: promote
  jobs:
  - promote
  - promote-gcp
  - promote-aws
  - promote-vsphere
  - promote-azure
  - promote-stembuild
  - github-release-stembuild
  - submit-azure-offer
  - publish-azure-offer
  - bump-minor

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
    username: ((docker.username))
    password: ((docker.password))
- name: azure-blobstore
  type: docker-image
  source:
    repository: pcfabr/azure-blobstore-resource
    username: ((docker.username))
    password: ((docker.password))
- name: metalink-repository
  type: registry-image
  source:
    repository: dpb587/metalink-repository-resource
    username: ((docker.username))
    password: ((docker.password))
- name: counter-resource
  type: docker-image
  source:
    repository: jinlee/counter-resource
    username: ((docker.username))
    password: ((docker.password))

- name: file-url
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

resources:
# repos
- name: azstemcell
  type: git
  source:
    branch: master
    uri: https://github.com/pivotal-cf/azstemcell.git
- name: bosh-stemcells-ci
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-stemcells-ci
- name: ci
  type: git
  source:
    branch: ((CI_BRANCH))
    uri: https://github.com/cloudfoundry-incubator/greenhouse-ci.git
- name: bosh-ecosystem-concourse
  type: git
  source:
    uri: git@github.com:pivotal/bosh-ecosystem-concourse.git
    private_key: ((github_deploy_key_bosh_ecosystem_concourse.private_key))
- name: bosh-ecosystem-docker-image
  type: registry-image
  source:
    repository: bosh/bosh-ecosystem-concourse
    username: ((docker.username))
    password: ((docker.password))
- name: stemcell-builder
  type: git
  source:
    branch: ((STEMCELL_BUILDER_BRANCH))
    uri: git@github.com:cloudfoundry-incubator/bosh-windows-stemcell-builder.git
    private_key: ((github_deploy_key_bosh-windows-stemcell-builder.private_key))
- name: bosh-psmodules-repo
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-psmodules.git
- name: boshio
  type: git
  source:
    branch: master
    uri: git@github.com:bosh-io/stemcells-windows-index.git
    private_key: ((github_deploy_key_stemcells-windows-index.private_key))
- name: windows-utilities-release
  type: git
  source:
    tag_filter: "*"
    uri: https://github.com/cloudfoundry-incubator/windows-utilities-release.git
- name: windows-utilities-tests-released
  type: git
  source:
    tag_filter: "*"
    uri: https://github.com/cloudfoundry-incubator/windows-utilities-tests.git
- name: pester
  type: git
  source:
    uri: https://github.com/pester/Pester.git
    tag_filter: 4.4.0
- name: stembuild
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/stembuild.git
    ignore_paths: [version/version]
- name: bosh-windows-acceptance-tests
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests.git

- name: ci-image
  type: registry-image
  source:
    repository: pivotalgreenhouse/ci
    username: ((docker.username))
    password: ((docker.password))

- name: govc-image
  type: registry-image
  source:
    repository: pivotalgreenhouse/govc
    username: ((docker.username))
    password: ((docker.password))
# releases
- name: openssh-release
  type: github-release
  source:
    owner: PowerShell
    repository: Win32-OpenSSH
    access_token: ((bosh_windows_ci_personal_access_token))
    tag_filter: v([^v].*)

- name: post-stembuild-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: stembuild
    access_token: ((bosh_windows_ci_personal_access_token))

- name: bosh-agent-release
  type: metalink-repository
  source:
    uri: git+https://github.com/cloudfoundry/bosh-agent-index.git//
    version: ((BOSH_AGENT_RELEASE_VERSION))

- name: lgpo-binary
  type: file-url
  source:
    url: "https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip"
    filename: "LGPO.zip"

# versions
- name: aws-build-number
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/aws-((PIPELINE_NAME))
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))
- name: azure-build-number
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/azure-((PIPELINE_NAME))
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))
- name: gcp-build-number
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/gcp-((PIPELINE_NAME))
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))
- name: stembuild-linux-build-number
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/stembuild-linux-((PIPELINE_NAME))
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))
- name: stembuild-windows-build-number
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/stembuild-windows-((PIPELINE_NAME))
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))
- name: stembuild-windows-stemcell-build-number
  type: counter-resource
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/stembuild-windows-stemcell-((PIPELINE_NAME))
    aws_access_key_id: ((bosh_windows_ci_aws_access_key.username))
    aws_secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: stembuild-linux-stemcell-build-number
  type: counter-resource
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/stembuild-linux-stemcell-((PIPELINE_NAME))
    aws_access_key_id: ((bosh_windows_ci_aws_access_key.username))
    aws_secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: main-version
  type: semver
  source:
    bucket: ((ROOT_BUCKET))
    key: ((BASE_FOLDER_NAME))/versions/main
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
    initial_version: ((STEMCELL_INITIAL_VERSION))

# locks
- name: aws-lock
  type: pool
  source:
    branch: master
    pool: ((AWS_POOL_NAME))
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: azure-lock
  type: pool
  source:
    branch: master
    pool: ((AZURE_POOL_NAME))
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: goose-lock
  type: pool
  source:
    branch: master
    pool: ((GOOSE_POOL_NAME))
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: gcp-lock
  type: pool
  source:
    branch: master
    pool: ((GCP_POOL_NAME))
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks
- name: vsphere-director-lock
  type: pool
  source:
    branch: master
    pool: ((VSPHERE_POOL_NAME))
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks

- name: nimbus-ips
  type: pool
  source:
    branch: master
    pool: "nimbus-ips"
    private_key: ((github_deploy_key_Bosh-Windows-Locks.private_key))
    uri: git@github.com:pivotal-cf-experimental/Bosh-Windows-Locks

# s3 buckets
- name: blobstore-s3-cli
  type: s3
  source:
    bucket: s3cli-artifacts
    regexp: s3cli-(.*)-windows-amd64.exe

- name: blobstore-dav-cli
  type: s3
  source:
    bucket: davcli
    regexp: davcli-(.*)-windows-amd64.exe

- name: blobstore-gcs-cli
  type: s3
  source:
    bucket: bosh-gcscli
    regexp: bosh-gcscli-(.*)-windows-amd64.exe

- name: windows-bsdtar
  type: s3
  source:
    bucket: bosh-windows-dependencies
    regexp: tar-(.*).exe
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))

- name: stembuild-linux-stemcell
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/stembuild-linux-stemcells/bosh-stemcell-(.*)-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))

- name: stembuild-windows-stemcell
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/stembuild-windows-stemcells/bosh-stemcell-(.*)-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))

- name: stembuild-linux-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-private
    regexp: ((BASE_FOLDER_NAME))/promoted-stembuild-linux-stemcells/bosh-stemcell-(.*)-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: azure-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: ((BASE_FOLDER_NAME))/light-bosh-stemcell-(.*)-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: packer-output-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/packer-output-ami-(.*).txt
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: packer-output-china-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/packer-output-ami-(.*).txt
    access_key_id: ((awschina00_aws_access_key.username))
    secret_access_key: ((awschina00_aws_access_key.password))
    region_name: ((AWS_CHINA_PACKER_REGION))
- name: packer-output-govcloud-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/packer-output-ami-(.*).txt
    access_key_id: ((packer_user_gov_aws_access_key.username))
    secret_access_key: ((packer_user_gov_aws_access_key.password))
    region_name: ((AWS_GOVCLOUD_PACKER_REGION))
- name: aws-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: aws-china-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_CHINA_PACKER_REGION)).tgz
    access_key_id: ((awschina00_aws_access_key.username))
    secret_access_key: ((awschina00_aws_access_key.password))
    region_name: ((AWS_CHINA_PACKER_REGION))
- name: aws-govcloud-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz
    access_key_id: ((packer_user_gov_aws_access_key.username))
    secret_access_key: ((packer_user_gov_aws_access_key.password))
    region_name: ((AWS_GOVCLOUD_PACKER_REGION))
- name: aws-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/tested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: aws-china-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/tested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_CHINA_PACKER_REGION)).tgz
    region_name: ((AWS_CHINA_PACKER_REGION))
    access_key_id: ((awschina00_aws_access_key.username))
    secret_access_key: ((awschina00_aws_access_key.password))
- name: aws-govcloud-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/tested/aws/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz
    region_name: ((AWS_GOVCLOUD_PACKER_REGION))
    access_key_id: ((packer_user_gov_aws_access_key.username))
    secret_access_key: ((packer_user_gov_aws_access_key.password))
- name: aws-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: ((BASE_FOLDER_NAME))/light-bosh-stemcell-(.*)-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: base-windows-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/base-amis-((BASE_IMAGE_OS))-(.*).json
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: base-china-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/base-amis-((BASE_IMAGE_OS))-(.*).json
    access_key_id: ((awschina00_aws_access_key.username))
    secret_access_key: ((awschina00_aws_access_key.password))
    region_name: ((AWS_CHINA_PACKER_REGION))
- name: base-govcloud-ami
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/aws/inputs/base-amis-((BASE_IMAGE_OS))-(.*).json
    access_key_id: ((packer_user_gov_aws_access_key.username))
    secret_access_key: ((packer_user_gov_aws_access_key.password))
    region_name: ((AWS_GOVCLOUD_PACKER_REGION))
- name: base-gcp-image
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/gcp/inputs/base-gcp-image-((BASE_IMAGE_OS))-(.*).json
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: gcp-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/gcp/light-bosh-stemcell-(.*)-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: gcp-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/tested/gcp/light-bosh-stemcell-(.*)-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: gcp-stemcell-final
  type: s3
  source:
    bucket: bosh-windows-stemcells-production
    region_name: us-east-2
    regexp: ((BASE_FOLDER_NAME))/light-bosh-stemcell-(.*)-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: azure-untested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/azure/light-bosh-stemcell-(.*)-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: azure-base-vhd-uri
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/untested/azure/inputs/bosh-stemcell-(.*)-azure-vhd-uri.txt
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: azure-tested
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: ((BASE_FOLDER_NAME))/tested/azure/light-bosh-stemcell-(.*)-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: ovftool
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: stembuild/dependencies/VMware-ovftool-(.*)-lin.x86_64.bundle
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: stembuild-untested-linux
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: stembuild/untested/stembuild-linux-x86_64-(((BOSHIO_OS_VERSION)).*)
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))
- name: stembuild-untested-windows
  type: s3
  source:
    bucket: ((ROOT_BUCKET))
    regexp: stembuild/untested/stembuild-windows-x86_64-(((BOSHIO_OS_VERSION)).*).exe
    access_key_id: ((bosh_windows_ci_aws_access_key.username))
    secret_access_key: ((bosh_windows_ci_aws_access_key.password))

#pivnet
- name: pivnet-public-stemcells
  type: pivnet
  source:
    api_token: ((pivnet_windows_stemcell_api_token))
    product_slug: stemcells-windows-server
    product_version: ((BOSHIO_OS_VERSION)).*
- name: pivnet-internal-stemcells
  type: pivnet
  source:
    api_token: ((pivnet_windows_stemcell_api_token))
    product_slug: stemcells-windows-server-internal
    product_version: ((BOSHIO_OS_VERSION)).*

# time
- name: midnight
  type: time
  source:
    start: 12:00 AM
    stop: 1:00 AM
    location: America/New_York

- name: weekly
  type: time
  source:
    start: 3:00 -0700
    stop: 4:30 -0700
    days: [Saturday]

jobs:
- name: clean-up-pre-release-blobstore
  serial: true
  plan:
  - get: ci
  - get: weekly
    trigger: true
  - task: clean-up-blobstore
    file: ci/tasks/clean-up-pre-release-blobstore/task.yml
    params:
      AZURE_STORAGE_ACCOUNT: ((AZURE_STORAGE_ACCOUNT))
      AZURE_STORAGE_ACCESS_KEY: ((heavy_azure_stemcell_azure_storage_access_key_koala))

- name: test-bosh-psmodules
  serial: true
  plan:
    - in_parallel:
        fail_fast: true
        steps:
          - get: pester
          - get: ci
          - get: bosh-psmodules-repo
            trigger: true
    - task: test-units-bosh-psmodules
      file: ci/tasks/test-units-bosh-psmodules/task.yml
      tags: [windows-nimbus]
- name: test-stemcell-builder
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        trigger: true
      - get: bosh-agent-release
      - get: bosh-psmodules-repo
        passed: [test-bosh-psmodules]
        trigger: true
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - task: test-stemcell-builder
    file: ci/tasks/test-stemcell-builder/task.yml
- name: build
  serial: true
  serial_groups: [aws-version, azure-version, gcp-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: bosh-ecosystem-concourse
      - get: bosh-ecosystem-docker-image
      - get: stemcell-builder
        trigger: true
        passed: [test-stemcell-builder]
      - get: stembuild
        trigger: true
      - get: bosh-psmodules-repo
        passed: [test-bosh-psmodules]
      - get: lgpo-binary
      - get: version
        resource: main-version
        params:
          bump: patch
      - get: midnight
        trigger: true
      - get: bosh-agent-release
  - task: configure-windows-firewall-rules
    file: bosh-ecosystem-concourse/tasks/deploy-concourse/configure-windows-firewall-rules.yml
    image: bosh-ecosystem-docker-image
    params:
      CHINA_AWS_ACCESS_KEY_ID: ((awschina00_aws_access_key.username))
      CHINA_AWS_DEFAULT_REGION: cn-north-1
      CHINA_AWS_SECRET_ACCESS_KEY: ((awschina00_aws_access_key.password))
      COMMERCIAL_AWS_ACCESS_KEY_ID: ((aws-stemcells_aws_access_key.username))
      COMMERCIAL_AWS_DEFAULT_REGION: ((AWS_PACKER_REGION))
      COMMERCIAL_AWS_SECRET_ACCESS_KEY: ((aws-stemcells_aws_access_key.password))
      CONCOURSE_GCP_CREDENTIALS_JSON: ((gcp_credentials_json))
      GOVCLOUD_AWS_ACCESS_KEY_ID: ((packer_user_gov_aws_access_key.username))
      GOVCLOUD_AWS_DEFAULT_REGION: ((AWS_GOVCLOUD_PACKER_REGION))
      GOVCLOUD_AWS_SECRET_ACCESS_KEY: ((packer_user_gov_aws_access_key.password))
      WINDOWS_STEMCELLS_GCP_CREDENTIALS_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
  - put: main-version
    params:
      file: version/number
  - in_parallel:
      fail_fast: true
      steps:
      - put: aws-build-number
        params:
          file: version/number
      - put: gcp-build-number
        params:
          file: version/number
      - put: azure-build-number
        params:
          file: version/number
      - put: stembuild-windows-build-number
        params:
          file: version/number
      - put: stembuild-linux-build-number
        params:
          file: version/number
  - in_parallel:
      fail_fast: true
      steps:
      - task: collect-amis
        file: ci/tasks/collect-base-amis/task.yml
        output_mapping: { base-amis: windows-amis }
        params:
          AWS_ACCESS_KEY_ID: ((read-vpc-ec2_aws_access_key.username))
          AWS_SECRET_ACCESS_KEY: ((read-vpc-ec2_aws_access_key.password))
          BASE_AMI: ((BASE_IMAGE_OS))
          BASE_AMI_NAME: ((BASE_AMI_NAME))
          PACKER_REGION: ((AWS_PACKER_REGION))
      - task: collect-china-amis
        file: ci/tasks/collect-base-amis/task.yml
        output_mapping: { base-amis: china-amis }
        params:
          AWS_ACCESS_KEY_ID: ((awschina00_aws_access_key.username))
          AWS_SECRET_ACCESS_KEY: ((awschina00_aws_access_key.password))
          BASE_AMI: ((BASE_IMAGE_OS))
          BASE_AMI_NAME: ((BASE_AMI_NAME))
          PACKER_REGION: ((AWS_CHINA_PACKER_REGION))
      - task: collect-govcloud-amis
        file: ci/tasks/collect-base-amis/task.yml
        output_mapping: { base-amis: govcloud-amis }
        params:
          AWS_ACCESS_KEY_ID: ((packer_user_gov_aws_access_key.username))
          AWS_SECRET_ACCESS_KEY: ((packer_user_gov_aws_access_key.password))
          BASE_AMI: ((BASE_IMAGE_OS))
          BASE_AMI_NAME: ((BASE_AMI_NAME))
          PACKER_REGION: ((AWS_GOVCLOUD_PACKER_REGION))
      - task: collect-gcp-image
        file: ci/tasks/collect-gcp-image/task.yml
        output_mapping: { base-gcp-image: windows-gcp-image }
        params:
          ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
          BASE_OS: ((BASE_IMAGE_OS))
          BASE_IMAGE_REGEX: ((BASE_IMAGE_REGEX))
          IMAGE_FAMILY: ((IMAGE_FAMILY))
  - in_parallel:
      fail_fast: true
      steps:
      - put: base-windows-ami
        params:
          file: windows-amis/base-amis-((BASE_IMAGE_OS))-*.json
      - put: base-china-ami
        params:
          file: china-amis/base-amis-((BASE_IMAGE_OS))-*.json
      - put: base-govcloud-ami
        params:
          file: govcloud-amis/base-amis-((BASE_IMAGE_OS))-*.json
      - put: base-gcp-image
        params:
          file: windows-gcp-image/base-gcp-image-((BASE_IMAGE_OS))-*.json

- name: stembuild-windows
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: pester
      - get: open-ssh
        resource: openssh-release
      - get: stemcell-builder
        passed: [build]
      - get: ci
      - get: version
        resource: stembuild-windows-build-number
        passed: [build]
        trigger: true
      - get: main-version
        passed: [build]
      - get: lgpo-binary
      - get: bosh-agent-release
        passed: [build]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: stembuild
        passed: [build]
      - get: ovftool
      - put: nimbus-ips
        params: { acquire: true }
      - get: govc-image
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - put: version
    resource: stembuild-windows-build-number
    params:
      pre: build
  - in_parallel:
      fail_fast: true
      steps:
      - task: test-units-stemcell-automation
        file: ci/tasks/test-units-stemcell-automation/task.yml
        tags: [windows-nimbus]
      - task: build-agent
        file: ci/tasks/build-agent-zip/task.yml
      - task: build-psmodules
        file: ci/tasks/build-psmodules-zip/task.yml
      - task: unit-test
        file: ci/tasks/test-units-stembuild-windows/task.yml
        tags: [windows-nimbus]
      - task: setup-integration-test-vm
        tags: [windows-nimbus]
        image: govc-image
        file: ci/tasks/setup-integration-test-vm/task.yml
        params:
          VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
          OS_LINE: ((PIPELINE_NAME))
          BASE_VM_IPATH: /dc0/vm/bosh-windows-ci-vms-and-templates/stembuild_base_vm_2019_
          CLONE_DATASTORE: ((nimbus_windows_ds))
          CLONE_RESOURCE_POOL: /dc0/host/concourse_cluster/Resources
          CLONE_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
          JOB_OS_NAME: "windows"
  - task: generate-deps-file
    file: ci/tasks/generate-deps-file/task.yml
  - task: zip-files
    file: ci/tasks/zip-files/task.yml
  - task: integration
    tags: [windows-nimbus]
    file: ci/tasks/test-integration-stembuild-windows/task.yml
    timeout: 3h
    params:
      VCENTER_BASE_URL: ((nimbus_windows_base_url))
      GOVC_DATASTORE: ((nimbus_windows_ds))
      GOVC_NETWORK: ((NIMBUS_VCENTER_NETWORK))
      GOVC_RESOURCE_POOL: /dc0/host/concourse_cluster/Resources
      VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
      VCENTER_USERNAME: ((nimbus_windows_user.username))
      VCENTER_PASSWORD: ((nimbus_windows_user.password))
      VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
      VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
      VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
      LOGOUT_INTEGRATION_TEST_VM_INVENTORY_PATH: ((NIMBUS_WINDOWS_LOGOUT_TEST_VM_PATH))
      LOGOUT_INTEGRATION_TEST_VM_IP: 192.168.111.35
      PACKAGE_TEST_VM_NAME: ((NIMBUS_PACKAGE_TEST_VM_NAME))
      OS_LINE: ((PIPELINE_NAME))
  - task: build
    tags: [windows-nimbus]
    file: ci/tasks/build-stembuild-windows/task.yml
    params:
      STEMCELL_AUTOMATION_ZIP: zip-file/StemcellAutomation-*.zip
  - put: stembuild-untested-windows
    params:
      file: output/stembuild-windows-x86_64-*.exe
  ensure:
    do:
    - task: delete-integration-test-vm
      tags: [windows-nimbus]
      file: ci/tasks/delete-integration-test-vm/task.yml
      image: govc-image
      params:
        CLONE_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
        VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
    - put: nimbus-ips
      params: { release: nimbus-ips }

- name: stembuild-linux
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: pester
      - get: open-ssh
        resource: openssh-release
      - get: stemcell-builder
        passed: [build]
      - get: ci
      - get: version
        resource: stembuild-linux-build-number
        passed: [build]
        trigger: true
      - get: main-version
        passed: [build]
      - get: lgpo-binary
      - get: bosh-agent-release
        passed: [build]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: stembuild
        passed: [build]
      - get: ovftool
      - put: nimbus-ips
        params: { acquire: true }
      - get: ci-image
      - get: govc-image
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - put: version
    resource: stembuild-linux-build-number
    params:
      pre: build
  - in_parallel:
      fail_fast: true
      steps:
      - task: test-units-stemcell-automation
        file: ci/tasks/test-units-stemcell-automation/task.yml
        tags: [windows-nimbus]
      - task: build-agent
        file: ci/tasks/build-agent-zip/task.yml
        image: ci-image
      - task: build-psmodules
        file: ci/tasks/build-psmodules-zip/task.yml
        image: ci-image
      - task: unit-test
        file: ci/tasks/test-units-stembuild-linux/task.yml
        image: ci-image
      - task: contract-test
        file: ci/tasks/test-contract-stembuild-linux/task.yml
        image: ci-image
        tags: [windows-nimbus]
        params:
          VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
          VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
          PACKAGE_TEST_VM_NAME: ((NIMBUS_PACKAGE_TEST_VM_NAME))
          VCENTER_BASE_URL: ((nimbus_windows_base_url))
          VCENTER_USERNAME: ((nimbus_windows_user.username))
          VCENTER_PASSWORD: ((nimbus_windows_user.password))
          CONTRACT_TEST_VM_NAME: ((NIMBUS_CONTRACT_TEST_VM_NAME))
          CONTRACT_TEST_VM_PASSWORD: ((NIMBUS_CONTRACT_TEST_VM_PASSWORD))
          CONTRACT_TEST_VM_USERNAME: ((NIMBUS_CONTRACT_TEST_VM_USERNAME))
      - task: setup-integration-test-vm
        image: govc-image
        tags: [windows-nimbus]
        file: ci/tasks/setup-integration-test-vm/task.yml
        params:
          VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
          OS_LINE: ((PIPELINE_NAME))
          BASE_VM_IPATH: /dc0/vm/bosh-windows-ci-vms-and-templates/stembuild_base_vm_2019_
          CLONE_DATASTORE: ((nimbus_windows_ds))
          CLONE_RESOURCE_POOL: /dc0/host/concourse_cluster/Resources
          CLONE_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
          JOB_OS_NAME: "linux"
  - task: generate-deps-file
    file: ci/tasks/generate-deps-file/task.yml
    image: ci-image
  - task: zip-files
    file: ci/tasks/zip-files/task.yml
    image: ci-image
  - task: integration
    file: ci/tasks/test-integration-stembuild-linux/task.yml
    image: ci-image
    tags: [windows-nimbus]
    timeout: 3h
    params:
      VCENTER_BASE_URL: ((nimbus_windows_base_url))
      GOVC_DATASTORE: ((nimbus_windows_ds))
      GOVC_NETWORK: ((NIMBUS_VCENTER_NETWORK))
      GOVC_RESOURCE_POOL: /dc0/host/concourse_cluster/Resources
      VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
      VCENTER_USERNAME: ((nimbus_windows_user.username))
      VCENTER_PASSWORD: ((nimbus_windows_user.password))
      VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
      VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
      VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
      LOGOUT_INTEGRATION_TEST_VM_INVENTORY_PATH: ((NIMBUS_LINUX_LOGOUT_TEST_VM_PATH))
      LOGOUT_INTEGRATION_TEST_VM_IP: 192.168.111.34
      PACKAGE_TEST_VM_NAME: ((NIMBUS_PACKAGE_TEST_VM_NAME))
      OS_LINE: ((PIPELINE_NAME))
  - task: build
    file: ci/tasks/build-stembuild-linux/task.yml
    image: ci-image
    params:
      STEMCELL_AUTOMATION_ZIP: zip-file/StemcellAutomation-*.zip
  - put: stembuild-untested-linux
    params:
      file: output/stembuild-linux-x86_64-*
  ensure:
    do:
    - task: delete-integration-test-vm
      tags: [windows-nimbus]
      image: govc-image
      file: ci/tasks/delete-integration-test-vm/task.yml
      params:
        CLONE_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
        VCENTER_ADMIN_CREDENTIAL_URL: ((nimbus_windows_auth_url))
    - put: nimbus-ips
      params: { release: nimbus-ips }

- name: create-stembuild-linux-stemcell
  serial: true
  serial_groups: [vsphere]
  plan:
  - in_parallel:
    - get: ci
    - get: lgpo-binary
    - get: stembuild-untested-linux
      passed: [stembuild-linux]
      trigger: true
    - get: build-number
      resource: stembuild-linux-build-number
      passed: [stembuild-linux]
    - get: stemcell-build-number
      resource: stembuild-linux-stemcell-build-number
      params:
        inc: true
    - get: govc-image
    - get: ci-image
  - put: stembuild-linux-stemcell-build-number
    params:
      file: stemcell-build-number/count
  - task: revert-snapshot
    file: ci/tasks/revert-snapshot/task.yml
    image: govc-image
    tags: [windows-nimbus]
    params:
      GOVC_URL: ((nimbus_windows_auth_url))
      DATACENTER: ((NIMBUS_VCENTER_STEMBUILD_DC))
      VM_TO_REVERT: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_LINUX))
      SNAPSHOT_NAME: "stembuild-ready-power-on"
  - task: install-windows-updates
    file: ci/tasks/install-windows-updates/task.yml
    image: govc-image
    tags: [windows-nimbus]
    params:
      GOVC_URL: ((nimbus_windows_auth_url))
      VCENTER_BASE_URL: ((nimbus_windows_base_url))
      STEMBUILD_CONSTRUCT_TARGET_VM: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_LINUX))
      VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
      VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
  - task: update-snapshot
    file: ci/tasks/update-snapshot/task.yml
    image: govc-image
    tags: [windows-nimbus]
    params:
      GOVC_URL: ((nimbus_windows_auth_url))
      DATACENTER: ((NIMBUS_VCENTER_STEMBUILD_DC))
      VM_TO_SNAPSHOT: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_LINUX))
      SNAPSHOT_NAME: "stembuild-ready-power-on"
  - task: run-stembuild-construct
    file: ci/tasks/run-construct-stembuild-linux/task.yml
    image: ci-image
    tags: [windows-nimbus]
    params:
      VCENTER_BASE_URL: ((nimbus_windows_base_url))
      VCENTER_USERNAME: ((nimbus_windows_user.username))
      VCENTER_PASSWORD: ((nimbus_windows_user.password))
      VCENTER_VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
      STEMBUILD_BASE_VM_NAME: ((NIMBUS_STEMBUILD_VM_NAME_LINUX))
      STEMBUILD_BASE_VM_IP: 192.168.111.31
      STEMBUILD_BASE_VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
      STEMBUILD_BASE_VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
  - task: run-stembuild-package
    file: ci/tasks/run-package-stembuild-linux/task.yml
    image: ci-image
    tags: [windows-nimbus]
    params:
      VCENTER_BASE_URL: ((nimbus_windows_base_url))
      VCENTER_USERNAME: ((nimbus_windows_user.username))
      VCENTER_PASSWORD: ((nimbus_windows_user.password))
      STEMBUILD_BASE_VM_NAME: ((NIMBUS_STEMBUILD_VM_NAME_LINUX))
      VCENTER_VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
  - &print-updates
    task: print-updates
    config:
      platform: linux
      image_resource: {type: docker-image, source: {repository: pivotalgreenhouse/ci}}
      inputs:
        - name: hotfix-log
      run:
        path: cat
        args: ["hotfix-log/hotfixes.log"]
  - put: stembuild-linux-stemcell
    params:
      file: stembuild-built-stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz

- name: test-stembuild-linux-stemcell
  serial: true
  serial_groups: [vsphere]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: stembuild-untested-linux
        passed: [create-stembuild-linux-stemcell]
      - get: stembuild-linux-stemcell
        passed: [create-stembuild-linux-stemcell]
        trigger: true
      - get: ci-image
  - put: vsphere-director-lock
    params:
      acquire: true
  - do:
    - task: run-bwats-stembuild-linux
      file: ci/tasks/run-bwats/task.yml
      image: ci-image
      tags: [windows-nimbus]
      input_mapping: { stemcell: stembuild-linux-stemcell }
      params:
        BOSH_CA_CERT: ((nimbus_windows_bosh_ca_cert.ca))
        BOSH_CLIENT: ((nimbus_windows_bosh_client.username))
        BOSH_CLIENT_SECRET: ((nimbus_windows_bosh_client.password))
        BOSH_ENVIRONMENT: ((nimbus_windows_bosh_environment))
        SSH_TUNNEL_IP: ((nimbus_windows_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((nimbus_windows_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((nimbus_windows_bosh_jumpbox_username))
        STEMCELL_OS: ((STEMCELL_OS_NAME)) # this should be whatever the os listed in stemcell.MF says
        STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
        VM_TYPE: large # WARN: This is Cloud Config specific!!!
        VM_EXTENSIONS: 10GB_ephemeral_disk
        MOUNT_EPHEMERAL_DISK: true
        SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
        DEFAULT_USERNAME: ((NIMBUS_VM_USERNAME))
        DEFAULT_PASSWORD: ((NIMBUS_VM_PASSWORD))
    ensure:
      put: vsphere-director-lock
      params:
        release: vsphere-director-lock

- name: wuts-stembuild-linux-stemcell
  serial: true
  serial_groups: [vsphere]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
        - get: ci
        - get: windows-utilities-release
        - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
          resource: windows-utilities-tests-released
        - get: stembuild-untested-linux
          passed: [test-stembuild-linux-stemcell]
        - get: stembuild-linux-stemcell
          trigger: true
          passed: [test-stembuild-linux-stemcell]
        - get: ci-image
  - put: vsphere-director-lock
    params:
      acquire: true
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      image: ci-image
      tags: [windows-nimbus]
      input_mapping: { stemcell: stembuild-linux-stemcell }
      params:
        AZ: z1
        BOSH_CA_CERT: ((nimbus_windows_bosh_ca_cert.ca))
        BOSH_CLIENT: ((nimbus_windows_bosh_client.username))
        BOSH_CLIENT_SECRET: ((nimbus_windows_bosh_client.password))
        BOSH_ENVIRONMENT: ((nimbus_windows_bosh_environment))
        NETWORK: default
        SSH_TUNNEL_IP: ((nimbus_windows_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((nimbus_windows_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((nimbus_windows_bosh_jumpbox_username))
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
        VM_EXTENSIONS: ""
        VM_TYPE: default # TODO: Add "put" output of this passing test to release candidates bucket (?)
    ensure:
      put: vsphere-director-lock
      params:
        release: vsphere-director-lock

- name: create-stembuild-windows-stemcell
  serial: true
  serial_groups: [vsphere-windows]
  plan:
    - in_parallel:
        - get: ci
        - get: lgpo-binary
        - get: stembuild-untested-windows
          passed: [stembuild-windows]
          trigger: true
        - get: build-number
          resource: stembuild-windows-build-number
          passed: [stembuild-windows]
        - get: stemcell-build-number
          resource: stembuild-windows-stemcell-build-number
          params:
            inc: true
        - get: govc-image
        - get: ci-image
    - put: stembuild-windows-stemcell-build-number
      params:
        file: stemcell-build-number/count
    - task: revert-snapshot
      file: ci/tasks/revert-snapshot/task.yml
      image: govc-image
      tags: [windows-nimbus]
      params:
        GOVC_URL: ((nimbus_windows_auth_url))
        DATACENTER: ((NIMBUS_VCENTER_STEMBUILD_DC))
        VM_TO_REVERT: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_WINDOWS))
        SNAPSHOT_NAME: "stembuild-ready-power-on"
    - task: install-windows-updates
      file: ci/tasks/install-windows-updates/task.yml
      image: govc-image
      tags: [windows-nimbus]
      params:
        GOVC_URL: ((nimbus_windows_auth_url))
        VCENTER_BASE_URL: ((nimbus_windows_base_url))
        STEMBUILD_CONSTRUCT_TARGET_VM: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_WINDOWS))
        VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
        VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
    - task: update-snapshot
      file: ci/tasks/update-snapshot/task.yml
      image: govc-image
      tags: [windows-nimbus]
      params:
        GOVC_URL: ((nimbus_windows_auth_url))
        DATACENTER: ((NIMBUS_VCENTER_STEMBUILD_DC))
        VM_TO_SNAPSHOT: ((NIMBUS_VCENTER_VM_FOLDER))/((NIMBUS_STEMBUILD_VM_NAME_WINDOWS))
        SNAPSHOT_NAME: "stembuild-ready-power-on"
    - task: run-stembuild-construct
      file: ci/tasks/run-construct-stembuild-windows/task.yml
      tags: [windows-nimbus]
      params:
        VCENTER_BASE_URL: ((nimbus_windows_base_url))
        VCENTER_USERNAME: ((nimbus_windows_user.username))
        VCENTER_PASSWORD: ((nimbus_windows_user.password))
        VCENTER_VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
        STEMBUILD_BASE_VM_NAME: ((NIMBUS_STEMBUILD_VM_NAME_WINDOWS))
        STEMBUILD_BASE_VM_IP: 192.168.111.32
        STEMBUILD_BASE_VM_USERNAME: ((NIMBUS_STEMBUILD_VM_USERNAME))
        STEMBUILD_BASE_VM_PASSWORD: ((NIMBUS_STEMBUILD_VM_PASSWORD))
    - task: run-stembuild-package
      file: ci/tasks/run-package-stembuild-windows/task.yml
      tags: [windows-nimbus]
      params:
        VCENTER_BASE_URL: ((nimbus_windows_base_url))
        VCENTER_USERNAME: ((nimbus_windows_user.username))
        VCENTER_PASSWORD: ((nimbus_windows_user.password))
        STEMBUILD_BASE_VM_NAME: ((NIMBUS_STEMBUILD_VM_NAME_WINDOWS))
        VCENTER_VM_FOLDER: ((NIMBUS_VCENTER_VM_FOLDER))
    - *print-updates
    - put: stembuild-windows-stemcell
      params:
        file: stembuild-built-stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz

- name: test-stembuild-windows-stemcell
  serial: true
  serial_groups: [vsphere]
  plan:
    - in_parallel:
        fail_fast: true
        steps:
          - get: ci
          - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
            resource: bosh-windows-acceptance-tests
          - get: stembuild-untested-windows
            passed: [create-stembuild-windows-stemcell]
          - get: stembuild-windows-stemcell
            passed: [create-stembuild-windows-stemcell]
            trigger: true
          - get: ci-image
    - put: vsphere-director-lock
      params:
        acquire: true
    - do:
        - task: run-bwats-stembuild-windows
          file: ci/tasks/run-bwats/task.yml
          image: ci-image
          tags: [windows-nimbus]
          input_mapping: { stemcell: stembuild-windows-stemcell }
          params:
            BOSH_CA_CERT: ((nimbus_windows_bosh_ca_cert.ca))
            BOSH_CLIENT: ((nimbus_windows_bosh_client.username))
            BOSH_CLIENT_SECRET: ((nimbus_windows_bosh_client.password))
            BOSH_ENVIRONMENT: ((nimbus_windows_bosh_environment))
            SSH_TUNNEL_IP: ((nimbus_windows_bosh_jumpbox_ip))
            SSH_TUNNEL_PRIVATE_KEY: ((nimbus_windows_bosh_jumpbox_ssh.private_key))
            SSH_TUNNEL_USER: ((nimbus_windows_bosh_jumpbox_username))
            STEMCELL_OS: ((STEMCELL_OS_NAME)) # this should be whatever the os listed in stemcell.MF says
            STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
            VM_TYPE: large # WARN: This is Cloud Config specific!!!
            VM_EXTENSIONS: 10GB_ephemeral_disk
            MOUNT_EPHEMERAL_DISK: true
            SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
            DEFAULT_USERNAME: ((NIMBUS_VM_USERNAME))
            DEFAULT_PASSWORD: ((NIMBUS_VM_PASSWORD))
      ensure:
        put: vsphere-director-lock
        params:
          release: vsphere-director-lock

- name: wuts-stembuild-windows-stemcell
  serial: true
  serial_groups: [vsphere]
  plan:
    - in_parallel:
        fail_fast: true
        steps:
          - get: ci
          - get: windows-utilities-release
          - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
            resource: windows-utilities-tests-released
          - get: stembuild-untested-windows
            passed: [test-stembuild-windows-stemcell]
          - get: stembuild-windows-stemcell
            trigger: true
            passed: [test-stembuild-windows-stemcell]
          - get: ci-image
    - put: vsphere-director-lock
      params:
        acquire: true
    - do:
        - task: run-wuts
          file: ci/tasks/run-wuts/task.yml
          image: ci-image
          tags: [windows-nimbus]
          input_mapping: { stemcell: stembuild-windows-stemcell }
          params:
            AZ: z1
            BOSH_CA_CERT: ((nimbus_windows_bosh_ca_cert.ca))
            BOSH_CLIENT: ((nimbus_windows_bosh_client.username))
            BOSH_CLIENT_SECRET: ((nimbus_windows_bosh_client.password))
            BOSH_ENVIRONMENT: ((nimbus_windows_bosh_environment))
            NETWORK: default
            SSH_TUNNEL_IP: ((nimbus_windows_bosh_jumpbox_ip))
            SSH_TUNNEL_PRIVATE_KEY: ((nimbus_windows_bosh_jumpbox_ssh.private_key))
            SSH_TUNNEL_USER: ((nimbus_windows_bosh_jumpbox_username))
            STEMCELL_OS: ((STEMCELL_OS_NAME))
            STEMCELL_PATH: stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz
            VM_EXTENSIONS: ""
            VM_TYPE: default
      ensure:
        put: vsphere-director-lock
        params:
          release: vsphere-director-lock

- name: create-aws
  serial: true
  serial_groups: [aws-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: base-amis
        resource: base-windows-ami
        passed: [build]
      - get: version
        resource: aws-build-number
        passed: [build]
        trigger: true
      - get: lgpo-binary
      - get: main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
      - get: bosh-agent-release
        passed: [build]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - put: version
    resource: aws-build-number
    params:
      pre: build
  - task: create-packer-ci-key
    privileged: true
    config:
      platform: linux
      image_resource: { type: docker-image, source: {repository: pivotalgreenhouse/ci } }
      outputs:
      - name: packer-ci-private-key
      run:
        path: bash
        args:
        - "-c"
        - 'echo "$PACKER_CI" > packer-ci-private-key/key && chmod 600 packer-ci-private-key/key'
      params:
        PACKER_CI: ((bosh_windows_aws_packer_ci_private_key.private_key))
  - task: create-aws-stemcell
    attempts: 3
    timeout: 2h
    file: ci/tasks/create-aws-stemcell/task.yml
    params:
      AWS_ACCESS_KEY: ((aws-stemcells_aws_access_key.username))
      AWS_REGION: us-east-1
      AWS_SECRET_KEY: ((aws-stemcells_aws_access_key.password))
      PACKER_REGION: ((AWS_PACKER_REGION))
      OS_VERSION: ((STEMCELL_OS_NAME))
      OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
      VM_PREFIX: ((VM_PREFIX))
      MOUNT_EPHEMERAL_DISK: true
    ensure:
      task: delete-orphan-vms
      file: ci/tasks/delete-vms/task.yml
      params:
        AWS_ACCESS_KEY_ID: ((aws-stemcells_aws_access_key.username))
        AWS_SECRET_ACCESS_KEY: ((aws-stemcells_aws_access_key.password))
        IAAS: aws
        REGIONS: "us-east-1,us-east-2,us-west-1,us-west-2,ca-central-1,ap-south-1,ap-northeast-1,ap-northeast-2,ap-southeast-1,ap-southeast-2,eu-central-1,eu-west-1,eu-west-2,sa-east-1"
        VM_PREFIX: ((VM_PREFIX))
  - *print-updates
  - task: wait-for-ami-availability
    file: ci/tasks/wait-for-ami-availability/task.yml
    params:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY: ((aws-stemcells_aws_access_key.username))
      AWS_SECRET_KEY: ((aws-stemcells_aws_access_key.password))
  - in_parallel:
      fail_fast: true
      steps:
      - put: aws-untested
        params:
          file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz
      - put: packer-output-ami
        params:
          file: amis/packer-output-ami-*.txt

- name: test-aws
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: bosh-windows-stemcell
        resource: aws-untested
        passed: [create-aws]
      - get: ci
      - get: stemcell-builder
        passed: [create-aws]
      - get: version
        resource: aws-build-number
        passed: [create-aws]
        trigger: true
      - get: main-version
        passed: [create-aws]
      - get: packer-output-ami
        passed: [create-aws]
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [create-aws]
  - task: run-bwats-aws-stemcell
    file: ci/tasks/run-bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    params:
      BOSH_CA_CERT: ((iaas_directors_aws-director_bosh_ca_cert.ca))
      BOSH_CLIENT: ((iaas_directors_aws-director_bosh_client.username))
      BOSH_CLIENT_SECRET: ((iaas_directors_aws-director_bosh_client.password))
      BOSH_ENVIRONMENT: ((iaas_directors_aws-director_bosh_environment))
      SSH_TUNNEL_IP: ((iaas_directors_aws-director_bosh_jumpbox_ip))
      SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_aws-director_bosh_jumpbox_ssh.private_key))
      SSH_TUNNEL_USER: ((iaas_directors_aws-director_bosh_jumpbox_username))
      STEMCELL_OS: ((STEMCELL_OS_NAME))
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz
      MOUNT_EPHEMERAL_DISK: true
      VM_EXTENSIONS: 50GB_ephemeral_disk
      SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
      DEFAULT_USERNAME: ((STEMBUILD_VM_USERNAME))
      DEFAULT_PASSWORD: ((STEMBUILD_VM_PASSWORD))
  - put: aws-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz

- name: wuts-aws
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests-released
      - get: bosh-windows-stemcell
        resource: aws-tested
        passed: [test-aws]
        trigger: true
      - get: stemcell-builder
        passed: [test-aws]
      - get: main-version
        passed: [test-aws]
      - get: packer-output-ami
        passed: [test-aws]
      - get: aws-build-number
        passed: [test-aws]
      - get: bosh-agent-release
        passed: [test-aws]
  - put: aws-lock
    params:
      acquire: true
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        AZ: z1
        BOSH_CA_CERT: ((iaas_directors_aws-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_aws-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_aws-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_aws-director_bosh_environment))
        NETWORK: default
        SSH_TUNNEL_IP: ((iaas_directors_aws-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_aws-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_aws-director_bosh_jumpbox_username))
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_PACKER_REGION)).tgz
        VM_EXTENSIONS: ""
        VM_TYPE: large
    ensure:
      put: aws-lock
      params:
        release: aws-lock

- name: create-aws-china
  serial: true
  serial_groups: [aws-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [wuts-aws]
      - get: base-amis
        resource: base-china-ami
        passed: [build]
      - get: lgpo-binary
      - get: version
        passed: [wuts-aws]
        resource: aws-build-number
        trigger: true
      - get: main-version
        passed: [wuts-aws]
      - get: sshd
        resource: openssh-release
      - get: bosh-agent-release
        passed: [wuts-aws]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - task: create-packer-ci-key
    privileged: true
    config:
      platform: linux
      image_resource: { type: docker-image, source: {repository: pivotalgreenhouse/ci } }
      outputs:
      - name: packer-ci-private-key
      run:
        path: bash
        args:
        - "-c"
        - 'echo "$PACKER_CI" > packer-ci-private-key/key && chmod 600 packer-ci-private-key/key'
      params:
        PACKER_CI: ((bosh_windows_aws_china_packer_ci_private_key.private_key))
  - task: create-aws-china-stemcell
    attempts: 3
    tags: [asia]
    timeout: 1h30m
    file: ci/tasks/create-aws-stemcell/task.yml
    params:
      AWS_ACCESS_KEY: ((awschina00_aws_access_key.username))
      AWS_REGION: ((AWS_CHINA_PACKER_REGION))
      AWS_SECRET_KEY: ((awschina00_aws_access_key.password))
      PACKER_REGION: ((AWS_CHINA_PACKER_REGION))
      OS_VERSION: ((STEMCELL_OS_NAME))
      OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
      OUTPUT_BUCKET_REGION: ((AWS_CHINA_PACKER_REGION))
      VM_PREFIX: ((VM_PREFIX))
      MOUNT_EPHEMERAL_DISK: true
    ensure:
      task: delete-orphan-vms
      file: ci/tasks/delete-vms/task.yml
      params:
        AWS_ACCESS_KEY_ID: ((awschina00_aws_access_key.username))
        AWS_SECRET_ACCESS_KEY: ((awschina00_aws_access_key.password))
        IAAS: aws
        REGIONS: ((AWS_CHINA_PACKER_REGION))
        VM_PREFIX: ((VM_PREFIX))
  - *print-updates
  - in_parallel:
      fail_fast: true
      steps:
      - put: aws-china-untested
        params:
          file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_CHINA_PACKER_REGION)).tgz
      - put: packer-output-china-ami
        params:
          file: amis/packer-output-ami-*.txt

# Run BWATS against China stemcell
- name: test-aws-china
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: bosh-windows-stemcell
        resource: aws-china-untested
        passed: [create-aws-china]
      - get: ci
      - get: stemcell-builder
        passed: [create-aws-china]
      - get: version
        resource: aws-build-number
        passed: [create-aws-china]
        trigger: true
      - get: main-version
        passed: [create-aws-china]
      - get: packer-output-china-ami
        passed: [create-aws-china]
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [create-aws-china]
  - task: skip-bwats-aws-china-stemcell
    config:
      image_resource:
        source:
          repository: pivotalgreenhouse/ci
        type: docker-image
      platform: linux
      run:
        path: /bin/bash
        args:
        - -xc
        - |
          echo "Explicitly skipping running bwats in the China region. The default NTP server (time.google.com) is failing in China AWS and attempts to reconfigure bosh-deployment with a China-based one have failed. We don't believe the additional testing is worth the cost here."
  - put: aws-china-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_CHINA_PACKER_REGION)).tgz

- name: wuts-aws-china
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests-released
      - get: bosh-windows-stemcell
        resource: aws-china-tested
        passed: [test-aws-china]
        trigger: true
      - get: stemcell-builder
        passed: [test-aws-china]
      - get: main-version
        passed: [test-aws-china]
      - get: packer-output-china-ami
        passed: [test-aws-china]
      - get: aws-build-number
        passed: [test-aws-china]
      - get: bosh-agent-release
        passed: [test-aws-china]
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      tags: [asia]
      params:
        AZ: z1
        BOSH_CA_CERT: ((iaas_directors_aws-china-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_aws-china-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_aws-china-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_aws-china-director_bosh_environment))
        SSH_TUNNEL_IP: ((iaas_directors_aws-china-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_aws-china-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_aws-china-director_bosh_jumpbox_username))
        NETWORK: default
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_CHINA_PACKER_REGION)).tgz
        VM_EXTENSIONS: ""
        VM_TYPE: large

- name: create-aws-govcloud
  serial: true
  serial_groups: [aws-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [wuts-aws]
      - get: base-amis
        resource: base-govcloud-ami
        passed: [build]
      - get: version
        passed: [wuts-aws]
        resource: aws-build-number
        trigger: true
      - get: lgpo-binary
      - get: main-version
        passed: [wuts-aws]
      - get: sshd
        resource: openssh-release
      - get: bosh-agent-release
        passed: [wuts-aws]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - task: create-packer-ci-key
    privileged: true
    config:
      platform: linux
      image_resource: { type: docker-image, source: {repository: pivotalgreenhouse/ci } }
      outputs:
      - name: packer-ci-private-key
      run:
        path: bash
        args:
        - "-c"
        - 'echo "$PACKER_CI" > packer-ci-private-key/key && chmod 600 packer-ci-private-key/key'
      params:
        PACKER_CI: ((bosh_windows_aws_govcloud_packer_ci_private_key.private_key))
  - task: create-aws-govcloud-stemcell
    attempts: 3
    timeout: 1h30m
    file: ci/tasks/create-aws-stemcell/task.yml
    params:
      AWS_ACCESS_KEY: ((packer_user_gov_aws_access_key.username))
      AWS_REGION: us-gov-west-1
      AWS_SECRET_KEY: ((packer_user_gov_aws_access_key.password))
      PACKER_REGION: ((AWS_GOVCLOUD_PACKER_REGION))
      OS_VERSION: ((STEMCELL_OS_NAME))
      OUTPUT_BUCKET_NAME: ((AWS_REGIONAL_BUCKET))
      VM_PREFIX: ((VM_PREFIX))
      MOUNT_EPHEMERAL_DISK: true
    ensure:
      task: delete-orphan-vms
      file: ci/tasks/delete-vms/task.yml
      params:
        AWS_ACCESS_KEY_ID: ((packer_user_gov_aws_access_key.username))
        AWS_SECRET_ACCESS_KEY: ((packer_user_gov_aws_access_key.password))
        IAAS: aws
        REGIONS: "us-gov-west-1"
        VM_PREFIX: ((VM_PREFIX))
  - *print-updates
  - in_parallel:
      fail_fast: true
      steps:
      - put: aws-govcloud-untested
        params:
          file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz
      - put: packer-output-govcloud-ami
        params:
          file: amis/packer-output-ami-*.txt

# Run BWATS against Govcloud stemcell
- name: test-aws-govcloud
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: bosh-windows-stemcell
        resource: aws-govcloud-untested
        passed: [create-aws-govcloud]
      - get: ci
      - get: stemcell-builder
        passed: [create-aws-govcloud]
      - get: version
        resource: aws-build-number
        passed: [create-aws-govcloud]
        trigger: true
      - get: main-version
        passed: [create-aws-govcloud]
      - get: packer-output-govcloud-ami
        passed: [create-aws-govcloud]
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [create-aws-govcloud]
  - task: run-bwats-aws-govcloud-stemcell
    file: ci/tasks/run-bwats/task.yml
    input_mapping: { stemcell: bosh-windows-stemcell }
    params:
      BOSH_CA_CERT: ((iaas_directors_aws-govcloud-director_bosh_ca_cert.ca))
      BOSH_CLIENT: ((iaas_directors_aws-govcloud-director_bosh_client.username))
      BOSH_CLIENT_SECRET: ((iaas_directors_aws-govcloud-director_bosh_client.password))
      BOSH_ENVIRONMENT: ((iaas_directors_aws-govcloud-director_bosh_environment))
      SSH_TUNNEL_IP: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_ip))
      SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_ssh.private_key))
      SSH_TUNNEL_USER: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_username))
      STEMCELL_OS: ((STEMCELL_OS_NAME))
      STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz
      MOUNT_EPHEMERAL_DISK: true
      VM_EXTENSIONS: 50GB_ephemeral_disk
      SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
      DEFAULT_USERNAME: ((STEMBUILD_VM_USERNAME))
      DEFAULT_PASSWORD: ((STEMBUILD_VM_PASSWORD))
  - put: aws-govcloud-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz

- name: wuts-aws-govcloud
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests-released
      - get: bosh-windows-stemcell
        resource: aws-govcloud-tested
        passed: [test-aws-govcloud]
        trigger: true
      - get: stemcell-builder
        passed: [test-aws-govcloud]
      - get: main-version
        passed: [test-aws-govcloud]
      - get: packer-output-govcloud-ami
        passed: [test-aws-govcloud]
      - get: aws-build-number
        passed: [test-aws-govcloud]
      - get: bosh-agent-release
        passed: [test-aws-govcloud]
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        AZ: z1
        BOSH_CA_CERT: ((iaas_directors_aws-govcloud-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_aws-govcloud-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_aws-govcloud-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_aws-govcloud-director_bosh_environment))
        SSH_TUNNEL_IP: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_aws-govcloud-director_bosh_jumpbox_username))
        NETWORK: default
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent-((AWS_GOVCLOUD_PACKER_REGION)).tgz
        VM_EXTENSIONS: ""
        VM_TYPE: large

- name: create-azure
  serial: true
  serial_groups: [azure-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: version
        resource: azure-build-number
        passed: [build]
        trigger: true
      - get: lgpo-binary
      - get: main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
      - get: bosh-agent-release
        passed: [build]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - put: version
    resource: azure-build-number
    params:
      pre: build
  - task: create-azure-stemcell
    attempts: 3
    file: ci/tasks/create-azure-stemcell/task.yml
    params:
      BASE_IMAGE: ((AZURE_BASE_IMAGE))
      BASE_IMAGE_OFFER: ((AZURE_BASE_IMAGE_OFFER))
      CLIENT_ID: ((koala_azure_credentials_json.client_id))
      CLIENT_SECRET: ((koala_azure_credentials_json.client_secret))
      LOCATION: ((AZURE_LOCATION))
      OFFER: ((AZURE_OFFER))
      OS_VERSION: ((AZURE_OS_VERSION))
      PUBLISHER: ((AZURE_PUBLISHER))
      RESOURCE_GROUP_NAME: ((koala_azure_credentials_json.resource_group_name))
      SKU: ((AZURE_SKU))
      STORAGE_ACCOUNT: ((AZURE_STORAGE_ACCOUNT))
      SUBSCRIPTION_ID: ((koala_azure_credentials_json.subscription_id))
      TENANT_ID: ((koala_azure_credentials_json.tenant_id))
      VM_SIZE: ((AZURE_VM_SIZE))
      VM_PREFIX: ((VM_PREFIX))
      MOUNT_EPHEMERAL_DISK: true
    ensure:
      task: delete-orphan-vms
      file: ci/tasks/delete-vms/task.yml
      params:
        CLIENT_ID: ((koala_azure_credentials_json.client_id))
        CLIENT_SECRET: ((koala_azure_credentials_json.client_secret))
        IAAS: azure
        SUBSCRIPTION_ID: ((koala_azure_credentials_json.subscription_id))
        TENANT_ID: ((koala_azure_credentials_json.tenant_id))
        VM_PREFIX: ((VM_PREFIX))
  - *print-updates
  - put: azure-untested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
  - put: azure-base-vhd-uri
    params:
      file: bosh-windows-stemcell/bosh-stemcell-*-azure-vhd-uri.txt

- name: test-azure
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: azstemcell
      - get: stemcell-builder
        passed: [create-azure]
      - get: azure-build-number
        passed: [create-azure]
      - get: main-version
        passed: [create-azure]
      - get: bosh-windows-stemcell
        resource: azure-untested
        passed: [create-azure]
      - get: azure-base-vhd-uri
        passed: [create-azure]
      - get: version
        resource: azure-build-number
        passed: [create-azure]
        trigger: true
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [create-azure]
  - task: download-heavy
    file: ci/tasks/download-heavy-azure-stemcell/task.yml
    timeout: 6h
    params:
      STEMCELL_OS: ((AZURE_OS_VERSION))
      DESTINATION_DIR: heavy-stemcell
      WORKING_DIR: '.'
  - task: run-bwats-azure-stemcell
    file: ci/tasks/run-bwats/task.yml
    input_mapping: {stemcell: heavy-stemcell}
    params:
      AZ: ((AZURE_HEAVY_AZ))
      BOSH_CA_CERT: ((iaas_directors_azure-director_bosh_ca_cert.ca))
      BOSH_CLIENT: ((iaas_directors_azure-director_bosh_client.username))
      BOSH_CLIENT_SECRET: ((iaas_directors_azure-director_bosh_client.password))
      BOSH_ENVIRONMENT: ((iaas_directors_azure-director_bosh_environment))
      SSH_TUNNEL_IP: ((iaas_directors_azure-director_bosh_jumpbox_ip))
      SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_azure-director_bosh_jumpbox_ssh.private_key))
      SSH_TUNNEL_USER: ((iaas_directors_azure-director_bosh_jumpbox_username))
      STEMCELL_OS: ((AZURE_OS_VERSION))
      STEMCELL_PATH: stemcell/*.tgz
      VM_TYPE: ((AZURE_HEAVY_VM_TYPE))
      ROOT_EPHEMERAL_VM_TYPE: ((ROOT_EPHEMERAL_VM_TYPE))
      MOUNT_EPHEMERAL_DISK: true
      VM_EXTENSIONS: "50GB_ephemeral_disk"
      SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
      DEFAULT_USERNAME: ((STEMBUILD_VM_USERNAME))
      DEFAULT_PASSWORD: ((STEMBUILD_VM_PASSWORD))
  - put: azure-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
- name: wuts-azure
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: azstemcell
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests-released
      - get: bosh-windows-stemcell
        resource: azure-tested
        passed: [test-azure]
        trigger: true
      - get: azure-base-vhd-uri
        passed: [test-azure]
      - get: azure-build-number
        passed: [test-azure]
      - get: stemcell-builder
        passed: [test-azure]
      - get: main-version
        passed: [test-azure]
      - get: bosh-agent-release
        passed: [test-azure]
  - task: download-heavy
    file: ci/tasks/download-heavy-azure-stemcell/task.yml
    timeout: 6h
    params:
      STEMCELL_OS: ((AZURE_OS_VERSION))
      DESTINATION_DIR: heavy-stemcell
  - put: azure-lock
    params:
      acquire: true
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      input_mapping: { stemcell: heavy-stemcell }
      params:
        AZ: ((AZURE_HEAVY_AZ))
        BOSH_CA_CERT: ((iaas_directors_azure-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_azure-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_azure-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_azure-director_bosh_environment))
        NETWORK: ((AZURE_HEAVY_NETWORK))
        SSH_TUNNEL_IP: ((iaas_directors_azure-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_azure-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_azure-director_bosh_jumpbox_username))
        STEMCELL_OS: ((AZURE_OS_VERSION))
        STEMCELL_PATH: stemcell/*.tgz
        VM_EXTENSIONS: ""
        VM_TYPE: ((AZURE_HEAVY_VM_TYPE))
    ensure:
      put: azure-lock
      params:
        release: azure-lock
- name: create-gcp
  serial: true
  serial_groups: [gcp-version]
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [build]
      - get: base-gcp-image
        resource: base-gcp-image
        passed: [build]
      - get: version
        resource: gcp-build-number
        passed: [build]
        trigger: true
      - get: lgpo-binary
      - get: main-version
        passed: [build]
      - get: sshd
        resource: openssh-release
      - get: bosh-agent-release
        passed: [build]
      - get: bosh-psmodules-repo
        passed: [build]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - put: version
    resource: gcp-build-number
    params:
      pre: build
  - task: create-gcp-stemcell
    attempts: 3
    file: ci/tasks/create-gcp-stemcell/task.yml
    params:
      OS_VERSION: ((STEMCELL_OS_NAME))
      ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
      VM_PREFIX: ((VM_PREFIX))
      MOUNT_EPHEMERAL_DISK: true
    ensure:
      task: delete-orphan-vms
      file: ci/tasks/delete-vms/task.yml
      params:
        ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
        IAAS: gcp
        VM_PREFIX: ((VM_PREFIX))
  - *print-updates
  - task: publish-gcp-stemcell
    file: ci/tasks/publish-gcp-stemcell/task.yml
    params:
      OS_VERSION: ((STEMCELL_OS_NAME))
      ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
  - put: gcp-untested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz

- name: test-gcp
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: bosh-windows-stemcell
        resource: gcp-untested
        passed: [create-gcp]
      - get: ci
      - get: stemcell-builder
        passed: [create-gcp]
      - get: version
        resource: gcp-build-number
        passed: [create-gcp]
        trigger: true
      - get: main-version
        passed: [create-gcp]
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [create-gcp]
  - put: goose-lock
    params:
      acquire: true
  - do:
    - task: run-bwats-gcp-stemcell
      file: ci/tasks/run-bwats/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        ACCOUNT_JSON: ((cf-bosh-windows-swan_gcp-bwats-1_gcp_credentials_json))
        AZ: az1
        BOSH_CA_CERT: ((iaas_directors_gcp-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_gcp-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_gcp-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_gcp-director_bosh_environment))
        IAAS: gcp
        SSH_TUNNEL_IP: ((iaas_directors_gcp-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_gcp-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_gcp-director_bosh_jumpbox_username))
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
        VM_EXTENSIONS: "50GB_ephemeral_disk" # WARN: Cloud Config specific
        MOUNT_EPHEMERAL_DISK: true
        SECURITY_COMPLIANCE_APPLIED: ((SECURITY_COMPLIANCE_APPLIED))
        DEFAULT_USERNAME: ((STEMBUILD_VM_USERNAME))
        DEFAULT_PASSWORD: ((STEMBUILD_VM_PASSWORD))
    ensure:
      put: goose-lock
      params:
        release: goose-lock
  - put: gcp-tested
    params:
      file: bosh-windows-stemcell/light-bosh-stemcell-*-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz

- name: wuts-gcp
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: windows-utilities-release
      - get: src/github.com/cloudfoundry-incubator/windows-utilities-tests
        resource: windows-utilities-tests-released
      - get: bosh-windows-stemcell
        resource: gcp-tested
        passed: [test-gcp]
        trigger: true
      - get: stemcell-builder
        passed: [test-gcp]
      - get: main-version
        passed: [test-gcp]
      - get: bosh-agent-release
        passed: [test-gcp]
  - put: gcp-lock
    params:
      acquire: true
  - do:
    - task: run-wuts
      file: ci/tasks/run-wuts/task.yml
      input_mapping: { stemcell: bosh-windows-stemcell }
      params:
        AZ: az1
        BOSH_CA_CERT: ((iaas_directors_gcp-director_bosh_ca_cert.ca))
        BOSH_CLIENT: ((iaas_directors_gcp-director_bosh_client.username))
        BOSH_CLIENT_SECRET: ((iaas_directors_gcp-director_bosh_client.password))
        BOSH_ENVIRONMENT: ((iaas_directors_gcp-director_bosh_environment))
        NETWORK: default
        SSH_TUNNEL_IP: ((iaas_directors_gcp-director_bosh_jumpbox_ip))
        SSH_TUNNEL_PRIVATE_KEY: ((iaas_directors_gcp-director_bosh_jumpbox_ssh.private_key))
        SSH_TUNNEL_USER: ((iaas_directors_gcp-director_bosh_jumpbox_username))
        STEMCELL_OS: ((STEMCELL_OS_NAME))
        STEMCELL_PATH: stemcell/light-bosh-stemcell-*-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
        VM_EXTENSIONS: "50GB_ephemeral_disk"
        VM_TYPE: large
    ensure:
      put: gcp-lock
      params:
        release: gcp-lock

- name: promote
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: aws-tested
        passed: [wuts-aws]
      - get: aws-govcloud-tested
        passed: [wuts-aws-govcloud]
      - get: gcp-tested
        passed: [wuts-gcp]
      - get: azure-tested
        passed: [wuts-azure]
      - get: azure-base-vhd-uri
        passed: [wuts-azure]
      - get: azure-build-number
        passed: [wuts-azure]
      - get: stemcell-builder
        passed:
        - wuts-gcp
        - wuts-aws
        - wuts-azure
        - wuts-aws-govcloud
        - wuts-aws-china
      - get: stembuild-untested-linux
        passed: [ wuts-stembuild-linux-stemcell ]
      - get: stembuild-linux-stemcell
        passed: [ wuts-stembuild-linux-stemcell ]
      - get: stembuild-untested-windows
        passed: [ wuts-stembuild-windows-stemcell ]
      - get: stembuild
        passed:
        - stembuild-linux
        - stembuild-windows
      - get: main-version
        passed:
        - wuts-gcp
        - wuts-aws
        - wuts-azure
        - wuts-aws-govcloud
        - wuts-aws-china
      - get: packer-output-ami
        passed: [wuts-aws]
      - get: packer-output-govcloud-ami
        passed: [wuts-aws-govcloud]
      - get: aws-build-number
        passed: [wuts-aws]
      - get: aws-china-tested
        passed: [wuts-aws-china]
      - get: packer-output-china-ami
        passed: [wuts-aws-china]
      - get: bosh-agent-release
        passed:
          - wuts-gcp
          - wuts-aws
          - wuts-azure
          - wuts-aws-govcloud
          - wuts-aws-china
      - get: bosh-psmodules-repo
        passed: [build]
  - task: ensure-versions-match
    file: ci/tasks/match-stemcell-versions/task.yml
    input_mapping: { stembuild-stemcell-tested: stembuild-linux-stemcell }

- name: promote-aws
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: aws-tested
        passed: [promote]
      - get: aws-govcloud-tested
        passed: [promote]
      - get: aws-china-tested
        passed: [promote]
      - get: bosh-ecosystem-docker-image
      - get: bosh-stemcells-ci
      - get: stemcell-builder
        passed: [promote]
      - get: version
        resource: main-version
        passed: [promote]
      - get: boshio-input
        resource: boshio
      - get: aws-build-number
        passed: [promote]
        trigger: true
      - get: default-ami
        resource: packer-output-ami
        passed: [promote]
      - get: govcloud-ami
        passed: [promote]
        resource: packer-output-govcloud-ami
      - get: china-ami
        passed: [promote]
        resource: packer-output-china-ami
      - get: src/github.com/cloudfoundry-incubator/bosh-windows-acceptance-tests
        resource: bosh-windows-acceptance-tests
      - get: bosh-agent-release
        passed: [promote]
      - get: bosh-psmodules-repo
        passed: [promote]
      - get: blobstore-dav-cli
      - get: blobstore-s3-cli
      - get: blobstore-gcs-cli
      - get: windows-bsdtar
  - get: pivnet-public-stemcells
    attempts: 5
  - task: copy-public-stemcells
    timeout: 1h30m
    attempts: 3
    input_mapping: { version: aws-build-number, default-stemcell: aws-tested, amis: default-ami}
    output_mapping: {copied-regional-stemcells: aws-public-stemcells}
    file: ci/tasks/copy-aws-stemcell/task.yml
    params:
      OS_VERSION: ((STEMCELL_OS_NAME))
      AWS_ACCESS_KEY: ((aws-stemcells_aws_access_key.username))
      AWS_SECRET_KEY: ((aws-stemcells_aws_access_key.password))
      REGIONS: "us-east-2,us-west-1,us-west-2,ca-central-1,ap-south-1,ap-northeast-2,ap-southeast-1,ap-southeast-2,ap-northeast-1,eu-central-1,eu-west-1,eu-west-2,eu-west-3,sa-east-1"
  - task: copy-govcloud-stemcells
    timeout: 1h30m
    attempts: 3
    input_mapping: { version: aws-build-number, default-stemcell: aws-govcloud-tested, amis: govcloud-ami}
    output_mapping: {copied-regional-stemcells: aws-govcloud-stemcells}
    file: ci/tasks/copy-aws-stemcell/task.yml
    params:
      OS_VERSION: ((STEMCELL_OS_NAME))
      AWS_ACCESS_KEY: ((packer_user_gov_aws_access_key.username))
      AWS_SECRET_KEY: ((packer_user_gov_aws_access_key.password))
      REGIONS: "us-gov-east-1"
  - task: copy-china-stemcells
    timeout: 1h30m
    attempts: 3
    input_mapping: { version: aws-build-number, default-stemcell: aws-china-tested, amis: china-ami}
    output_mapping: {copied-regional-stemcells: aws-china-stemcells}
    file: ci/tasks/copy-aws-stemcell/task.yml
    params:
      OS_VERSION: ((STEMCELL_OS_NAME))
      AWS_ACCESS_KEY: ((awschina00_aws_access_key.username))
      AWS_SECRET_KEY: ((awschina00_aws_access_key.password))
      REGIONS: cn-north-1
  - task: aggregate-stemcells
    file: ci/tasks/aggregate-stemcells/task.yml
    input_mapping: { version: aws-build-number, amis: default-ami }
    params:
      COPIED_STEMCELL_DIRECTORIES: '../aws-public-stemcells,../aws-govcloud-stemcells,../aws-china-stemcells'
      OS_VERSION: ((STEMCELL_OS_NAME))
  - task: aws-set-stemcell-filename-version
    file: ci/tasks/set-stemcell-version/task.yml
  - task: tag-published-aws-ami-light-stemcells
    file: bosh-stemcells-ci/tasks/light-aws/tag-aws-ami-light.yml
    image: bosh-ecosystem-docker-image
    input_mapping:
      candidate-aws-light-stemcell: final-stemcell
    params:
      AWS_ACCESS_KEY_ID: ((aws-stemcells_aws_access_key.username))
      AWS_SECRET_ACCESS_KEY: ((aws-stemcells_aws_access_key.password))
      GREP_PATTERN: grep -v 'gov-\|cn-'
  - task: tag-gov-published-aws-ami-light-stemcells
    file: bosh-stemcells-ci/tasks/light-aws/tag-aws-ami-light.yml
    image: bosh-ecosystem-docker-image
    input_mapping:
      candidate-aws-light-stemcell: final-stemcell
    params:
      AWS_ACCESS_KEY_ID: ((packer_user_gov_aws_access_key.username))
      AWS_SECRET_ACCESS_KEY: ((packer_user_gov_aws_access_key.password))
      GREP_PATTERN: grep 'gov-'
  - task: tag-china-published-aws-ami-light-stemcells
    file: bosh-stemcells-ci/tasks/light-aws/tag-aws-ami-light.yml
    image: bosh-ecosystem-docker-image
    input_mapping:
      candidate-aws-light-stemcell: final-stemcell
    params:
      AWS_ACCESS_KEY_ID: ((awschina00_aws_access_key.username))
      AWS_SECRET_ACCESS_KEY: ((awschina00_aws_access_key.password))
      GREP_PATTERN: grep 'cn-'
  - in_parallel:
    - task: upload-to-pivnet
      file: ci/tasks/upload-to-pivnet/task.yml
      input_mapping: { source-folder: final-stemcell, pivnet-release: pivnet-public-stemcells }
    - task: commit-dev-meta4-file
      file: ci/tasks/commit-meta4-file/task.yml
      input_mapping: { stemcell: final-stemcell }
      params:
        IAAS: aws
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - in_parallel:
    - put: aws-stemcell-final-s3
      resource: aws-stemcell-final
      params:
        file: final-stemcell/light-bosh-stemcell-*-aws-xen-hvm-((STEMCELL_OS_NAME))-go_agent.tgz
    - put: pivnet-public-stemcells
      attempts: 5
      params:
        override: true
        file_glob: 'pivnet-metadata/*stem*'
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true
  - try:
      task: cleanup-unpublished-aws-amis
      file: ci/tasks/cleanup-unpublished-aws-amis/task.yml
      params:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY: ((aws-stemcells_aws_access_key.username))
        AWS_SECRET_KEY: ((aws-stemcells_aws_access_key.password))


- name: promote-gcp
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: gcp-tested
        passed: [promote]
        trigger: true
      - get: version
        resource: main-version
        passed: [promote]
      - get: boshio-input
        resource: boshio
      - get: stemcell-builder
        passed: [promote]
  - get: pivnet-public-stemcells
    attempts: 5
  - task: gcp-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: gcp-tested }
    file: ci/tasks/set-stemcell-version/task.yml
  - task: label-gcp-stemcell-for-production
    file: ci/tasks/label-gcp-stemcell-for-production/task.yml
    input_mapping: { bosh-windows-stemcell: gcp-tested }
    params:
      ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))
  - in_parallel:
    - task: upload-to-pivnet
      file: ci/tasks/upload-to-pivnet/task.yml
      input_mapping: { source-folder: final-stemcell, pivnet-release: pivnet-public-stemcells }
    - task: commit-meta4-dev-file
      file: ci/tasks/commit-meta4-file/task.yml
      input_mapping: { stemcell: final-stemcell }
      params:
        IAAS: gcp
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - in_parallel:
    - put: gcp-stemcell-final-s3
      resource: gcp-stemcell-final
      params:
        file: final-stemcell/light-bosh-stemcell-*-google-kvm-((STEMCELL_OS_NAME))-go_agent.tgz
    - put: pivnet-public-stemcells
      attempts: 5
      params:
        override: true
        file_glob: 'pivnet-metadata/*stem*'
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true
  - task: cleanup-unpublished-gcp-images
    file: ci/tasks/cleanup-unpublished-gcp-images/task.yml
    params:
      ACCOUNT_JSON: ((cff-bosh-windows-stemcells_bosh-153_gcp_credentials_json))

- name: promote-vsphere
  serial_groups: ["vsphere"]
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stembuild-linux-stemcell
        passed: [ promote ]
        trigger: true
      - get: version
        resource: main-version
        passed: [promote]
      - get: pivnet-internal-stemcells
        attempts: 5
  - task: vsphere-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: stembuild-linux-stemcell }
    file: ci/tasks/set-stemcell-version/task.yml # this is what moves the stemcell into a folder called final-stemcell
  - task: upload-to-pivnet
    file: ci/tasks/upload-to-pivnet/task.yml
    input_mapping: { source-folder: final-stemcell, pivnet-release: pivnet-internal-stemcells }
  - in_parallel:
    - put: pivnet-internal-stemcells # This is what actually releases things to pivnet
      attempts: 5
      params:
        override: true
        file_glob: 'pivnet-metadata/*stem*'
        metadata_file: pivnet-metadata/metadata
    - put: vsphere-stemcell-final-s3  # now pushing these to a different sub-folder to distinguish stembuilt ones
      resource: stembuild-linux-stemcell-final
      params:
        file: final-stemcell/bosh-stemcell-*-vsphere-esxi-((STEMCELL_OS_NAME))-go_agent.tgz

- name: submit-azure-offer
  old_name: print-azure-publishing-instructions
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: stemcell-builder
        passed: [promote]
      - get: version
        resource: azure-build-number
        passed: [promote]
      - get: main-version
        passed: [promote]
      - get: azure-tested
        passed: [promote]
        trigger: true
      - get: azure-base-vhd-uri
        passed: [promote]
  - task: upload-image-and-start-publishing
    file: ci/tasks/upload-image-and-start-publishing/task.yml
    params:
      AZURE_STORAGE_ACCESS_KEY: ((heavy_azure_stemcell_azure_storage_access_key_koala))
      AZURE_STORAGE_ACCOUNT: ((AZURE_STORAGE_ACCOUNT))
      AZURE_PUBLISHED_STORAGE_ACCESS_KEY: ((azure_published_storage_access_key))
      AZURE_PUBLISHED_STORAGE_ACCOUNT: ((AZURE_PUBLISHED_STORAGE_ACCOUNT))
      AZURE_CONTAINER_NAME: ((AZURE_CONTAINER_NAME))
      AZURE_SKU: ((AZURE_SKU))
      AZURE_PUBLISHER: ((AZURE_PUBLISHER))
      AZURE_OFFER: ((AZURE_OFFER))
      PARTNER_PORTAL_TENANT_ID: ((PARTNER_PORTAL_TENANT_ID))
      PARTNER_PORTAL_CLIENT_ID: ((PARTNER_PORTAL_CLIENT_ID))
      PARTNER_PORTAL_CLIENT_SECRET: ((PARTNER_PORTAL_CLIENT_SECRET))
      OFFER_NOTIFICATION_EMAIL: ((OFFER_NOTIFICATION_EMAIL))

- name: publish-azure-offer
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: main-version
        passed: [submit-azure-offer]
      - get: azure-tested
        passed: [submit-azure-offer]
        trigger: true
  - task: wait-for-azure-publisher-signoff
    file: ci/tasks/wait-for-azure-publisher-signoff/task.yml
    timeout: 168h # 7 days
    params: &azure_publisher_information
      AZURE_PUBLISHER: ((AZURE_PUBLISHER))
      AZURE_OFFER: ((AZURE_OFFER))
      PARTNER_PORTAL_TENANT_ID: ((PARTNER_PORTAL_TENANT_ID))
      PARTNER_PORTAL_CLIENT_ID: ((PARTNER_PORTAL_CLIENT_ID))
      PARTNER_PORTAL_CLIENT_SECRET: ((PARTNER_PORTAL_CLIENT_SECRET))
  - task: signoff-azure-live
    file: ci/tasks/signoff-azure-live/task.yml
    params:
      <<: *azure_publisher_information
  - task: wait-for-azure-marketplace-offer-live
    file: ci/tasks/wait-for-azure-marketplace-offer-live/task.yml
    timeout: 120h # 5 days
    params:
      <<: *azure_publisher_information

- name: promote-azure
  serial_groups: ["pivnet"]
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: azure-tested
        passed: [publish-azure-offer]
        trigger: true
      - get: version
        resource: main-version
        passed: [publish-azure-offer]
      - get: boshio-input
        resource: boshio
  - get: pivnet-public-stemcells
    attempts: 5
  - task: azure-set-stemcell-filename-version
    input_mapping: { bosh-windows-stemcell: azure-tested }
    output_mapping: { final-stemcell: azure-stemcell-final }
    file: ci/tasks/set-stemcell-version/task.yml
  - in_parallel:
    - task: upload-to-pivnet
      file: ci/tasks/upload-to-pivnet/task.yml
      input_mapping: { source-folder: azure-stemcell-final, pivnet-release: pivnet-public-stemcells }
    - task: commit-meta4-file
      input_mapping: { stemcell: azure-stemcell-final }
      file: ci/tasks/commit-meta4-file/task.yml
      params:
        IAAS: azure
        OS_NAME: windows
        OS_VERSION: ((BOSHIO_OS_VERSION))
  - in_parallel:
    - put: azure-stemcell-final-s3
      resource: azure-stemcell-final
      params:
        file: azure-stemcell-final/light-bosh-stemcell-*-azure-hyperv-((STEMCELL_OS_NAME))-go_agent.tgz
    - put: pivnet-public-stemcells
      attempts: 5
      params:
        override: true
        file_glob: 'pivnet-metadata/*stem*'
        metadata_file: pivnet-metadata/metadata
    - put: boshio
      params:
        repository: boshio-output
        rebase: true

- name: promote-stembuild
  serial_groups: ["pivnet"]
  serial: true
  plan:
    - in_parallel:
        fail_fast: true
        steps:
        - get: ci
          trigger: false
        - get: stembuild-untested-linux
          trigger: true
          passed: [ promote ]
        - get: stembuild-untested-windows
          trigger: true
          passed: [ promote ]
        - get: version
          resource: main-version
          passed: [ promote ]
        - get: pivnet-release
          resource: pivnet-public-stemcells
          attempts: 5
    - task: set-stembuild-version
      file: ci/tasks/set-stembuild-version/task.yml
      input_mapping: {main-version: version}
    - task: prepare-stembuild-for-upload
      file: ci/tasks/upload-to-pivnet/task.yml
      input_mapping: {source-folder: final-stembuilds}
    - put: pivnet-release
      resource: pivnet-public-stemcells
      attempts: 5
      params:
        override: true
        file_glob: 'pivnet-metadata/*stem*'
        metadata_file: 'pivnet-metadata/metadata'

- name: github-release-stembuild
  old_name: publish-stembuild-and-stemcell-builder
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: ci
      - get: main-version
        passed: [promote-stembuild]
        trigger: true
      - get: stembuild
        passed: [promote]
      - get: stembuild-untested-windows
        passed: [promote-stembuild]
      - get: stembuild-untested-linux
        passed: [promote-stembuild]
  - task: set-stembuild-version
    file: ci/tasks/set-stembuild-version/task.yml
  - task: get-stembuild-commit-sha
    file: ci/tasks/get-stembuild-commit-sha/task.yml
  - put: post-stembuild-release
    params:
      name: final-stembuilds/tag
      tag: final-stembuilds/tag
      commitish: stembuild-commit/sha
      globs:
        - final-stembuilds/stembuild*

- name: bump-minor
  serial: true
  plan:
  - get: main-version
    passed:
    - github-release-stembuild
    - promote-aws
    - promote-azure
    - promote-gcp
    trigger: true
  - put: main-version
    params:
      bump: minor
